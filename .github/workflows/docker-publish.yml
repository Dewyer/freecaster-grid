name: Publish Docker image

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and push Docker image on ${{ matrix.arch }}
    runs-on: ubuntu-${{ matrix.ubuntu-flavor }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - ubuntu-flavor: latest
            arch: x86_64
          - ubuntu-flavor: 24.04-arm
            arch: arm64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dewyer/freecaster-grid
          flavor: suffix=-${{ matrix.arch }},onlatest=true
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.url=https://github.com/dewyer/freecaster-grid
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

  unify-manifests:
    name: Unify Docker manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Gather metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dewyer/freecaster-grid
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.url=https://github.com/dewyer/freecaster-grid
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Metadata for x86_64
        id: meta-x86_64
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dewyer/freecaster-grid
          flavor: suffix=-x86_64
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr

      - name: Metadata for arm64
        id: meta-arm64
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/dewyer/freecaster-grid
          flavor: suffix=-arm64
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=ref,event=pr

      - name: Convert multi-arch tags from newline to comma separated
        id: multiarch-tags
        run: |
          tags_x86_64=$(echo "${{ steps.meta-x86_64.outputs.tags }}" | tr '\n' ',')
          tags_arm64=$(echo "${{ steps.meta-arm64.outputs.tags }}" | tr '\n' ',')
          echo tags="$tags_x86_64,$tags_arm64" >> $GITHUB_OUTPUT
      - name: Create and push manifest list
        uses: Noelware/docker-manifest-action@1.0.0
        with:
          tags: ${{ steps.meta.outputs.tags }}
          inputs: ${{ steps.multiarch-tags.outputs.tags }}
          push: true

  comment-pr:
    name: Comment on PR with Docker image info
    runs-on: ubuntu-latest
    needs: unify-manifests
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Generate Docker image tags comment body
        id: generate-comment
        uses: actions/github-script@v7
        with:
          script: |
            // Collect newline-separated tags from previous job output
            const raw = `${{ needs.unify-manifests.outputs.tags }}`;
            const tags = raw.split('\n').map(s => s.trim()).filter(Boolean);

            if (tags.length === 0) {
              core.info('No tags found to comment. Skipping.');
              core.setOutput('body', '');
              return;
            }

            const list = tags.map(t => `- \`${t}\``).join('\n');
            const pullExample = `docker pull ${tags[0]}`;

            const body = [
              'Docker image(s) for this PR are available:',
              '',
              list,
              '',
              'Try locally:',
              '```',
              pullExample,
              '```'
            ].join('\n');

            core.setOutput('body', body);
      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Docker image(s) for this PR are available

      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.generate-comment.outputs.body }}

      - name: Update comment
        if: steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: ${{ steps.generate-comment.outputs.body }}
          edit-mode: replace
