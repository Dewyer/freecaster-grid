name: Publish Docker image

on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  workflow_call:
    inputs:
      tag:
        description: "Tag to use for the image"
        required: true
        type: string
      is_latest:
        description: "Whether this tag is the latest release"
        required: false
        default: false
        type: boolean
    outputs:
      tags:
        description: "Tags applied to the image"
        value: ${{ jobs.unify-manifests.outputs.tags }}

env:
  REGISTRY_IMAGE: ghcr.io/dewyer/freecaster-grid

jobs:
  build-and-push:
    name: Build and push Docker image on ${{ matrix.arch }}
    runs-on: ubuntu-${{ matrix.ubuntu-flavor }}
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - ubuntu-flavor: latest
            arch: x86_64
            platform: linux/amd64
          - ubuntu-flavor: 24.04-arm
            arch: arm64
            platform: linux/arm64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Gather metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY_IMAGE }}
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  unify-manifests:
    name: Unify Docker manifests
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Gather metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=latest,enable=${{ inputs.is_latest || false }}
            type=raw,value=main,enable=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}},value=${{ inputs.tag }}
            type=semver,pattern={{major}}.{{minor}},value=${{ inputs.tag }}
            type=semver,pattern={{major}},value=${{ inputs.tag }}
            type=ref,event=pr
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.url=https://github.com/dewyer/freecaster-grid
            org.opencontainers.image.revision=${{ github.sha }}
          flavor: |
            latest=false
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  comment-pr:
    name: Comment on PR with Docker image info
    runs-on: ubuntu-latest
    needs: unify-manifests
    if: ${{ github.event_name == 'pull_request' }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false

      - name: Checkout script
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            scripts/gen_docker_pr_preview.py

      - name: Generate Docker image tags comment body
        id: generate-comment
        run: |
          set -euo pipefail
          echo ${{ needs.unify-manifests.outputs.tags }} | uv run scripts/gen_docker_pr_preview.py > comment.md
          echo "body=$(cat comment.md)" >> $GITHUB_OUTPUT

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: Docker image(s) for this PR are available

      - name: Create comment
        if: steps.fc.outputs.comment-id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.generate-comment.outputs.body }}

      - name: Update comment
        if: steps.fc.outputs.comment-id != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body: ${{ steps.generate-comment.outputs.body }}
          edit-mode: replace
